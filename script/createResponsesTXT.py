import os

def createResponsesTXT (responsesMap):

    for key, value in responsesMap.items():
        r_path = os.path.join("output", f"{key}.txt")

        #value=[ChatCompletionMessage(content='```latex\n\\section{SVM nonseparable data}\n% Slide 1\nWhen data are non-linearly separable, we may get a separation between classes with a hyperplane only allowing that, after having defined the separating hyperplane, some patterns of the training set with positive label are classified as negative and viceversa. We must accept that some constraints are violated.\n\nWe introduce a slack variable $\\xi_i$ for each constraint, in order to allow an error tolerance:\n\\[\ny^{(i)}(\\mathbf{w}^T \\cdot \\mathbf{x}^{(i)} + b) \\geq 1 - \\xi^{(i)}\n\\]\n\nAn additional term $C$ is introduced in the cost function to penalize misclassification errors.\n\\[\n\\frac{1}{2} \\|\\mathbf{w}\\|^2 + C \\sum_{i=1}^{m} \\xi^{(i)}\n\\]\n\n\\section{Explanation of the slides}\n% Slide 1\nThis slide discusses Support Vector Machines (SVM) in the context of non-separable data. It explains how non-linear separability can lead to violations of constraints in classification. The introduction of slack variables $\\xi_i$ allows for error tolerance in the constraints, enabling some misclassifications. Additionally, an extra term $C$ in the cost function helps in penalizing these errors, establishing a balance between maximizing the margin and minimizing classification errors.\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None), ChatCompletionMessage(content='```latex\n\\section{SVM nonseparable data (cont.d)}\n% Page 2\nC \\text{ (regularization parameter) lets to control the trade-off between hypothesis space complexity and the admissible number of errors.} \\\\\n\\text{A big value for C gives a stronger penalization to errors.} \\\\\n\\text{The optimization problem to solve becomes:} \\\\\n\n\\text{Minimize: } \\frac{1}{2} \\|\\omega\\|^2 + C \\sum_{i=1}^{m} \\xi^{(i)} \\\\\n\ns.t. \\quad y^{(i)} \\left( \\omega^T \\cdot x^{(i)} + b \\right) \\geq 1 - \\xi^{(i)} \\\\\n\n\\xi^{(i)} \\geq 0 \n\n\\section{Explanation of the slides}\n% Page 2\n\\text{This slide discusses the role of the regularization parameter C in the context of Support Vector Machines (SVMs) for nonseparable data.} \\\\\n\\text{It explains how C impacts the balance between complexity of the hypothesis space and the number of acceptable errors in the model.} \\\\\n\\text{A larger value of C implies a greater penalty for errors, influencing the optimization problem that needs to be solved.} \\\\\n\\text{The mathematical formulation of the minimization problem is presented, including both the objective function and the constraints.}\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None), ChatCompletionMessage(content='```latex\n\\section{SVM nonseparable data (cont.d)}\n%Page 3\nThe dual problem becomes:\n\n\\[\n\\max_{\\alpha} \\sum_{i=1}^{m} \\alpha_i - \\frac{1}{2} \\sum_{i,j=1}^{m} \\alpha_i \\alpha_j y_i y_j x_i^T x_j\n\\]\n\ns.t. \\( 0 \\leq \\alpha_i \\leq C \\) and \\( \\sum_{i=1}^{m} \\alpha_i y_i = 0 \\)\n\nDual variables are now bounded with \\( C \\).\n\nThe proposed solution could not be enough. It does not guarantee good performances since a hyperplane can only represent a dichotomy in the space of instances/patterns.\n\n\\section{Explanation of the slides}\n%Page 3\nThis slide discusses the dual problem of Support Vector Machines (SVM) in the context of nonseparable data. It presents the formulation for maximizing the dual variables \\( \\alpha \\) under specific constraints. The mathematical expressions outline the optimization process, emphasizing the bounds on the dual variables. Additionally, it highlights the limitations of the proposed solution, noting that hyperplanes can only separate data into two classes, which may not yield satisfactory performance in all scenarios.\n```', refusal=None, role='assistant', audio=None, function_call=None, tool_calls=None)]

        with open(r_path, "x") as file:
            for v in value:
                try:
                    vString = str(v.content)
                    vString=vString.replace('```latex', '')
                    vString=vString.replace('```', '\n')
                    file.write(str(vString) + "\n") 
                except: 
                    print(f"Error occurd at page {value.indexof(v)}")
        print("Response files created for", {key})
